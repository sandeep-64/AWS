Demo-1: Launching EC2 Instance Without Key Pair

 Step 1: Instance Name and Tags
1. Click "Launch Instance"
2. Enter instance name (e.g., "TEST-1-nokeypair")

 Step 2: Choose AMI
1. Select "Amazon Linux 2023 AMI"
   - AMI ID: ami-094a9a574d190f541
   - Architecture: 64-bit (x86)
   - Boot mode: uefi-preferred
   - Default username: ec2-user

 Step 3: Choose Instance Type
1. Select "t3.micro" (Free tier eligible)
   - 2 vCPU
   - 1 GiB Memory

 Step 4: Key Pair Settings
1. Under "Key pair (login)" section
2. Leave "Select" dropdown empty
3. Important: This means you won't be able to SSH into the instance using key-based authentication

 Step 5: Network Settings
1. Select VPC: vpc-0f32bab413b9539d2
2. Subnet: "No preference"
3. Auto-assign public IP: Enable
4. Create new security group with rules:
   - SSH (Port 22) from anywhere
   - HTTPS (Port 443) from internet
   - HTTP (Port 80) from internet

 Step 6: Configure Storage
1. Volume type: gp3
2. Size: 8 GiB
3. IOPS: 3000
4. Leave encryption disabled

 Step 7: Review and Launch
1. Review all configurations
2. Click "Launch Instance"

======================================================

Demo-2: Launching EC2 Instance With Key Pair

 Step 1: Create a Key Pair
1. Go to EC2 Dashboard
2. In left navigation pane, under "Network & Security"
3. Click "Key Pairs"
4. Click "Create key pair"
   - Name: "demo-keypair"
   - Key pair type: RSA
   - Private key file format: .pem (for OpenSSH or Git Bash) or .ppk (for PuTTY)
5. Click "Create key pair"
6. Save the downloaded key file securely

 Step 2: Launch EC2 Instance
 Basic Details
1. Click "Launch Instance"
2. Enter instance name (e.g., "TEST-2-withkeypair")

 AMI Selection
1. Choose "Amazon Linux 2023 AMI"
   - AMI ID: ami-094a9a574d190f541
   - Architecture: 64-bit (x86)
   - Boot mode: uefi-preferred

 Instance Configuration
1. Select Instance Type: "t3.micro" (Free tier eligible)
   - 2 vCPU
   - 1 GiB Memory

 Key Pair Configuration
1. Under "Key pair (login)" section
2. Select "Choose existing key pair"
3. Select your created key pair "demo-keypair"
4. Check the acknowledgment box

 Network Settings
1. VPC: vpc-0f32bab413b9539d2
2. Subnet: Default (No preference)
3. Auto-assign public IP: Enable
4. Create new security group:
   ```
   Name: launch-wizard-1
   Rules:
   - SSH (22): Your IP or 0.0.0.0/0
   - HTTP (80): 0.0.0.0/0
   - HTTPS (443): 0.0.0.0/0
   ```

 Storage Configuration
1. Volume Type: gp3
2. Size: 8 GiB
3. IOPS: 3000

 Step 3: Launch and Connect
1. Click "Launch Instance"
2. Wait for instance to be running
3. Connect using SSH:
   ```
    For Linux/Macb - Launch GitBash from ".pem" file location
   chmod 400 demo-keypair.pem
   ssh -i "demo-keypair.pem" ec2-user@<public-ip>

    For Windows (PowerShell)
   ssh -i "demo-keypair.pem" ec2-user@<public-ip>
   ```
  
=========================================================

Demo-3: Launching EC2 Instance and install jenkins 

 1. Launch EC2
```
AWS Console → EC2 → Launch Instance

# Basic Config
Name: my-first-instance
AMI: Ubuntu Server (Free tier)
Type: t2.micro
Key pair: Create new (AWS_login.pem)
Network: Default VPC
Security Group: New
Storage: 8GB GP2
```

 2. Security Group Settings
```
Inbound Rules:
- SSH (22): Your IP
- Custom TCP (8080): Anywhere (Jenkins)
```

 3. Connect to EC2 [Git Bash]
```
# Linux/Mac
chmod 600 AWS_login.pem
ssh -i AWS_login.pem ubuntu@<public-ip>

# Windows
Use PuTTY/MobaXterm
```

 4. Install Java First
```
sudo apt update
sudo apt install fontconfig openjdk-17-jre -y

# Verify Java
java -version
```

 5. Install Jenkins (Choose ONE)

 Option A: LTS Version (Recommended)
```
# Add Jenkins Key & Repo
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/" | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
```

 Option B: Weekly Version
```
# Add Jenkins Key & Repo
sudo wget -O /usr/share/keyrings/jenkins-keyring.asc \
  https://pkg.jenkins.io/debian/jenkins.io-2023.key
echo "deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian binary/" | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
```

 6. Install & Start Jenkins
```
sudo apt update
sudo apt install jenkins -y

# Start Jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins
```

 7. Change Port (If 8080 is in use)
```
sudo systemctl edit jenkins
# Add:
[Service]
Environment="JENKINS_PORT=8081"
```

 Key Points:
- Default port: 8080
- Service user: jenkins
- Logs: journalctl -u jenkins.service
- Config: /lib/systemd/system/jenkins.service
- Auto-starts on boot
- Access: http://localhost:8080 (or ec2_instance_ip:8080)

=========================================================

 Demo-4: Launching EC2 Instance with NGINX Installation

```
Step 1: Launch EC2 Instance
1. Basic Details
   - Name: nginx-web-server
   - AMI: Amazon Linux 2023
   - Instance Type: t2.micro
   - Key pair: demo-keypair (use existing)

2. Network Settings
   - VPC: Default
   - Auto-assign Public IP: Enable
   - Security Group (new):
     Name: nginx-sg
     Rules:
     - SSH (22): Your IP
     - HTTP (80): Anywhere
     - HTTPS (443): Anywhere

3. Storage: 8GB gp3

Step 2: Connect & Install NGINX
1. Connect to EC2:
   ssh -i "demo-keypair.pem" ec2-user@<public-ip>

2. Update System:
   sudo dnf update -y

3. Install NGINX:
   sudo dnf install nginx -y

4. Start & Enable NGINX:
   sudo systemctl start nginx
   sudo systemctl enable nginx
   sudo systemctl status nginx

5. Create Custom Web Page:
   sudo tee /usr/share/nginx/html/index.html << EOF
   <!DOCTYPE html>
   <html>
   <head><title>Welcome to My Web Server</title></head>
   <body>
       <h1>Hello from EC2!</h1>
       <p>This is my custom NGINX page.</p>
   </body>
   </html>
   EOF

6. Test:
   - Open browser: http://<public-ip>
   - From EC2: curl localhost
```

 Demo-5: EC2 Instance with Custom User Data Script (Apache + PHP)

```
Step 1: Prepare User Data Script
1. Create this script before launching EC2:
#!/bin/bash
# Update system
dnf update -y

# Install Apache & PHP
dnf install -y httpd php php-mysqlnd

# Start & Enable Apache
systemctl start httpd
systemctl enable httpd

# Create PHP info page
echo "<?php phpinfo(); ?>" > /var/www/html/info.php

# Create custom index page
cat > /var/www/html/index.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>EC2 Web Server</title>
    <style>
        body { font-family: Arial; text-align: center; margin-top: 50px; }
    </style>
</head>
<body>
    <h1>Welcome to my EC2 Web Server</h1>
    <p>This page was created by user data script</p>
    <p><a href="/info.php">PHP Info</a></p>
</body>
</html>
EOF

# Set permissions
chown -R apache:apache /var/www/html

Step 2: Launch EC2 Instance
1. Basic Configuration
   - Name: apache-php-server
   - AMI: Amazon Linux 2023
   - Instance Type: t2.micro
   - Key pair: demo-keypair

2. Network Settings
   - VPC: Default
   - Auto-assign Public IP: Enable
   - Security Group (new):
     Name: apache-sg
     Rules:
     - SSH (22): Your IP
     - HTTP (80): Anywhere
     - HTTPS (443): Anywhere

3. Advanced Details
   - User data: Paste the script from Step 1
   - IAM role: None
   - Termination protection: Disable

4. Storage: 8GB gp3

Step 3: Verify Installation
1. Wait 3-5 minutes for user data script to complete
2. Test web server:
   - Browser: http://<public-ip>
   - PHP info: http://<public-ip>/info.php

Step 4: Monitor & Troubleshoot
1. Check Apache status:
   ssh -i "demo-keypair.pem" ec2-user@<public-ip>
   sudo systemctl status httpd

2. View logs if needed:
   sudo tail -f /var/log/httpd/error_log
   sudo tail -f /var/log/httpd/access_log

3. Check user data script log:
   sudo cat /var/log/cloud-init-output.log
```

Key Points for Both Demos:
1. Security Best Practices:
   - Always update system packages first
   - Limit SSH access to your IP
   - Use specific security group rules

2. Monitoring:
   - Check service status regularly
   - Monitor logs for errors
   - Set up CloudWatch if needed

3. Maintenance:
   - Regular updates
   - Backup configurations
   - Document all changes

4. Cost Management:
   - Use t2.micro for free tier
   - Stop instance when not in use
   - Monitor usage patterns
