Demo-1: Launching EC2 Instance Without Key Pair

 Step 1: Instance Name and Tags
1. Click "Launch Instance"
2. Enter instance name (e.g., "TEST-1-nokeypair")

 Step 2: Choose AMI
1. Select "Amazon Linux 2023 AMI"
   - AMI ID: ami-094a9a574d190f541
   - Architecture: 64-bit (x86)
   - Boot mode: uefi-preferred
   - Default username: ec2-user

 Step 3: Choose Instance Type
1. Select "t3.micro" (Free tier eligible)
   - 2 vCPU
   - 1 GiB Memory

 Step 4: Key Pair Settings
1. Under "Key pair (login)" section
2. Leave "Select" dropdown empty
3. Important: This means you won't be able to SSH into the instance using key-based authentication

 Step 5: Network Settings
1. Select VPC: vpc-0f32bab413b9539d2
2. Subnet: "No preference"
3. Auto-assign public IP: Enable
4. Create new security group with rules:
   - SSH (Port 22) from anywhere
   - HTTPS (Port 443) from internet
   - HTTP (Port 80) from internet

 Step 6: Configure Storage
1. Volume type: gp3
2. Size: 8 GiB
3. IOPS: 3000
4. Leave encryption disabled

 Step 7: Review and Launch
1. Review all configurations
2. Click "Launch Instance"

======================================================

Demo-2: Launching EC2 Instance With Key Pair

 Step 1: Create a Key Pair
1. Go to EC2 Dashboard
2. In left navigation pane, under "Network & Security"
3. Click "Key Pairs"
4. Click "Create key pair"
   - Name: "demo-keypair"
   - Key pair type: RSA
   - Private key file format: .pem (for OpenSSH or Git Bash) or .ppk (for PuTTY)
5. Click "Create key pair"
6. Save the downloaded key file securely

 Step 2: Launch EC2 Instance
 Basic Details
1. Click "Launch Instance"
2. Enter instance name (e.g., "TEST-2-withkeypair")

 AMI Selection
1. Choose "Amazon Linux 2023 AMI"
   - AMI ID: ami-094a9a574d190f541
   - Architecture: 64-bit (x86)
   - Boot mode: uefi-preferred

 Instance Configuration
1. Select Instance Type: "t3.micro" (Free tier eligible)
   - 2 vCPU
   - 1 GiB Memory

 Key Pair Configuration
1. Under "Key pair (login)" section
2. Select "Choose existing key pair"
3. Select your created key pair "demo-keypair"
4. Check the acknowledgment box

 Network Settings
1. VPC: vpc-0f32bab413b9539d2
2. Subnet: Default (No preference)
3. Auto-assign public IP: Enable
4. Create new security group:
   ```
   Name: launch-wizard-1
   Rules:
   - SSH (22): Your IP or 0.0.0.0/0
   - HTTP (80): 0.0.0.0/0
   - HTTPS (443): 0.0.0.0/0
   ```

 Storage Configuration
1. Volume Type: gp3
2. Size: 8 GiB
3. IOPS: 3000

 Step 3: Launch and Connect
1. Click "Launch Instance"
2. Wait for instance to be running
3. Connect using SSH:
   ```
    For Linux/Macb - Launch GitBash from ".pem" file location
   chmod 400 demo-keypair.pem
   ssh -i "demo-keypair.pem" ec2-user@<public-ip>

    For Windows (PowerShell)
   ssh -i "demo-keypair.pem" ec2-user@<public-ip>
   ```
  
=========================================================

# Quick EC2 Setup Guide with Jenkins

## 1. Launch EC2
```bash
AWS Console â†’ EC2 â†’ Launch Instance

# Basic Config
Name: my-first-instance
AMI: Ubuntu Server (Free tier)
Type: t2.micro
Key pair: Create new (AWS_login.pem)
Network: Default VPC
Security Group: New
Storage: 8GB GP2
```

## 2. Security Group Settings
```bash
Inbound Rules:
- SSH (22): Your IP
- Custom TCP (8080): Anywhere (Jenkins)
```

## 3. Connect to EC2
```bash
# Linux/Mac
chmod 600 AWS_login.pem
ssh -i AWS_login.pem ubuntu@<public-ip>

# Windows
Use PuTTY/MobaXterm
```

## 4. Install Jenkins
```bash
# Update & Install Java
sudo apt update
sudo apt install openjdk-11-jdk -y

# Add Jenkins Repo & Install
curl -fsSL https://pkg.jenkins.io/debian-stable/jenkins.io-2023.key | sudo tee \
  /usr/share/keyrings/jenkins-keyring.asc > /dev/null
echo deb [signed-by=/usr/share/keyrings/jenkins-keyring.asc] \
  https://pkg.jenkins.io/debian-stable binary/ | sudo tee \
  /etc/apt/sources.list.d/jenkins.list > /dev/null
sudo apt update
sudo apt install jenkins -y

# Start Jenkins
sudo systemctl start jenkins
sudo systemctl status jenkins
```

## 5. Access Jenkins
```bash
# Get initial password
sudo cat /var/lib/jenkins/secrets/initialAdminPassword

# Access URL
http://<public-ip>:8080
```

## Key Points
- Keep .pem file secure
- Stop/terminate instance when not in use
- Free tier: 750hrs/month
- Update security patches regularly
- Monitor costs

## Troubleshooting
- Check instance running
- Verify security group rules
- Confirm key permissions
- Validate public IP
- Test port 8080 access

That's it! You've got a running EC2 instance with Jenkins installed. ðŸš€
