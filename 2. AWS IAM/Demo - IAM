I'll provide a comprehensive demo guide that includes testing and cleanup procedures for each IAM component.

# Complete AWS IAM Demo with Testing & Cleanup

## Demo 1: IAM User Creation, Testing & Cleanup

### 1.1 Create User
bash
# Create user with console access
a. IAM → Users → Create user
b. Set details:
   - Username: "TestUser1"
   - Enable console access
   - Set password: "Welcome@123" (temporary)
c. Save credentials (download .csv)


### 1.2 Test User Access
bash
a. Open new incognito window
b. Use IAM user sign-in URL: https://[YOUR-ACCOUNT-ID].signin.aws.amazon.com/console
c. Login with TestUser1 credentials
Expected: User can log in but sees "You don't have permissions" messages


### 1.3 Add Basic Permissions
bash
a. Return to admin console
b. Attach "ReadOnlyAccess" policy to TestUser1
c. Test again in incognito window
Expected: User can now view but not modify resources


### 1.4 Cleanup
bash
a. IAM → Users → TestUser1
b. Select user → Delete
c. Type user name to confirm
d. Click "Delete"


## Demo 2: IAM Groups with Testing & Cleanup

### 2.1 Create Group & User
bash
# Create Developer Group
a. IAM → User groups → Create group
b. Name: "DevTeam"
c. Attach policies:
   - AWSCodeCommitFullAccess
   - AmazonS3ReadOnlyAccess

# Create Test User
d. Create new user "DevUser1"
e. Add to DevTeam group


### 2.2 Test Group Permissions
bash
a. Login as DevUser1
b. Test CodeCommit access:
   - Go to CodeCommit console
   - Try to create repository (should work)
c. Test S3 access:
   - Go to S3 console
   - Try to view buckets (should work)
   - Try to create bucket (should fail)


### 2.3 Cleanup
bash
a. Remove user from group:
   - Select DevTeam group
   - Remove DevUser1
b. Delete user DevUser1
c. Delete DevTeam group


## Demo 3: Custom Policy Creation & Testing

### 3.1 Create Test S3 Bucket First
bash
a. Go to S3 console
b. Create bucket: "test-iam-bucket-[unique-name]"
c. Upload test file: "test.txt"


### 3.2 Create Custom Policy
json
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": [
                "s3:GetObject",
                "s3:ListBucket"
            ],
            "Resource": [
                "arn:aws:s3:::test-iam-bucket-[unique-name]",
                "arn:aws:s3:::test-iam-bucket-[unique-name]/*"
            ]
        }
    ]
}


### 3.3 Test Custom Policy
bash
a. Create test user: "PolicyTestUser"
b. Attach custom policy
c. Login as PolicyTestUser
d. Test S3 access:
   - Should be able to list bucket contents
   - Should be able to download test.txt
   - Should NOT be able to upload files
   - Should NOT be able to delete files


### 3.4 Cleanup
bash
a. Delete PolicyTestUser
b. Delete custom policy
c. Empty and delete test S3 bucket


## Demo 4: IAM Role Testing

### 4.1 Create Role
bash
a. Create IAM role for EC2
b. Name: "TestEC2Role"
c. Attach: AmazonS3ReadOnlyAccess


### 4.2 Test Role with EC2
bash
a. Launch EC2 instance:
   - Use Amazon Linux 2
   - Attach TestEC2Role
   - Add tag: Name=RoleTest

b. SSH into instance:
aws s3 ls  # Should list buckets
aws s3 mb s3://test-bucket  # Should fail


### 4.3 Cleanup
bash
a. Terminate EC2 instance
b. Delete TestEC2Role


## Demo 5: MFA Testing

### 5.1 Setup MFA
bash
a. Create user: "MFATestUser"
b. Grant console access
c. Enable MFA:
   - Use Google Authenticator
   - Scan QR code
   - Enter two consecutive codes


### 5.2 Test MFA
bash
a. Logout
b. Login as MFATestUser
c. Verify MFA prompt appears
d. Test with:
   - Correct MFA (should work)
   - Wrong MFA (should fail)


### 5.3 Cleanup
bash
a. Deactivate MFA
b. Delete MFATestUser


## Best Practices Testing

### 1. Password Policy Test
bash
a. Set password policy:
   - Minimum length: 12
   - Require: uppercase, lowercase, numbers, symbols
   
b. Test by creating new user
c. Try changing password to weak password (should fail)


### 2. Access Key Testing
bash
a. Create access key for test user
b. Test AWS CLI:
   aws configure  # Enter access key details
   aws iam get-user  # Test access
c. Rotate access key:
   - Create new key
   - Update applications
   - Delete old key


## Final Cleanup Checklist
bash
1. Delete all test users
2. Delete all test groups
3. Delete custom policies
4. Delete roles
5. Delete test S3 buckets
6. Remove test access keys
7. Generate credential report to verify cleanup


## Verification Commands
bash
# List all users
aws iam list-users

# List groups
aws iam list-groups

# List roles
aws iam list-roles

# List policies
aws iam list-policies --scope Local

# Generate credential report
aws iam generate-credential-report
aws iam get-credential-report


Important Tips:
1. Always test permissions immediately after granting them
2. Use AWS Policy Simulator for complex policies
3. Keep track of all resources created during demo
4. Use meaningful names for easy identification
5. Document any errors encountered during testing
6. Use AWS CloudTrail to verify actions
7. Always verify cleanup is complete
