Demo 1: IAM User Created just for login AWS console

1. IAM → Users → Create user
2. Set only these:
   - Username: TestUser1
   - ✅ Check "Provide user access to the AWS Management Console"
   - Set password: Welcome@123
   - ❌ Uncheck "User must create new password at next sign-in"
3. Click Next → Next → Create user (skip all permission steps)

4. test login:
1. Use your AWS sign-in URL: https://[YOUR-ACCOUNT-ID].signin.aws.amazon.com/console
2. Login with:
   - Username: TestUser1
   - Password: Welcome@123

5. Cleanup
a. IAM → Users → TestUser1
b. Select user → Delete

==============================================================================

 Demo 2: IAM Groups created and attached to IAM user

 Part 1: Create IAM Group
1. Go to IAM Dashboard
2. In left sidebar, click "User groups"
3. Click "Create group" button
4. Group creation:
   - Group name: TestGroup
   - Skip the "Attach permissions policies" section (don't select any)
   - Click "Create group"

 Part 2: Add User to Group
1. Go to IAM → Users
2. Click on your user (TestUser1)
3. Go to "Groups" tab
4. Click "Add user to groups"
5. Select DemoGroup
6. Click "Add to groups"

==============================================================================

 Demo 3: IAM User and group created and attached defined policy

 Part 1: Create IAM Group with Policy
1. Go to IAM Dashboard
2. Click "User groups" in left sidebar
3. Click "Create group"
4. Group creation:
   - Group name: S3AccessGroup
   - In "Attach permissions policies" section:
     - Search for "AmazonS3ReadOnlyAccess"
     - Select the checkbox next to it
   - Click "Create group"

 Part 2: Add User to Group
1. Go to IAM → Users
2. Click on your user (TestUser1)
3. Go to "Groups" tab
4. Click "Add user to groups"
5. Select S3AccessGroup
6. Click "Add to groups"

 Part 3: Test the Permissions
1. Sign out of your admin account
2. Open new incognito window
3. Login with TestUser1:
   - URL: https://[YOUR-ACCOUNT-ID].signin.aws.amazon.com/console
   - Username: TestUser1
   - Password: Welcome@123
4. Test the permissions:
   - Go to S3 service
   - You should be able to:
     - View list of buckets
     - View contents of buckets
   - You should NOT be able to:
     - Create new buckets
     - Upload/delete files

==============================================================================

 Demo 4: IAM User,group and custom policy created and attached policy 

 Part 1: Create Custom Policy
1. Go to IAM Dashboard
2. Click "Policies" in left sidebar
3. Click "Create policy"
4. Choose JSON editor and paste this policy:
```
{
    "Version": "2012-10-17",
    "Statement": [
        {
            "Effect": "Allow",
            "Action": "s3:ListAllMyBuckets",
            "Resource": "*"
        },
        {
            "Effect": "Allow",
            "Action": [
                "s3:ListBucket",
                "s3:GetObject"
            ],
            "Resource": [
                "arn:aws:s3:::your-bucket-name",
                "arn:aws:s3:::your-bucket-name/*"
            ]
        }
    ]
}
```
5. Click "Next"
6. Name the policy:
   - Policy name: CustomS3BucketAccess
   - Description: "Custom policy for specific S3 bucket read access"
7. Click "Create policy"

 Part 2: Create Group with Custom Policy
1. Go to "User groups"
2. Click "Create group"
3. Group creation:
   - Group name: CustomPolicyGroup
   - In "Attach permissions policies":
     - Search for your custom policy "CustomS3BucketAccess"
     - Select it
4. Click "Create group"

 Part 3: Add User to Group
1. Go to IAM → Users
2. Click on your user (TestUser1)
3. Go to "Groups" tab
4. Click "Add user to groups"
5. Select CustomPolicyGroup
6. Click "Add to groups"

 Part 4: Test the Custom Permissions
1. Sign out of admin account
2. Open new incognito window
3. Login with TestUser1:
   - URL: https://[YOUR-ACCOUNT-ID].signin.aws.amazon.com/console
   - Username: TestUser1
   - Password: Welcome@123
4. Test the permissions:
   - Go to S3 service
   - You should be able to:
     - List contents of specified bucket
     - Download/view files from specified bucket
   - You should NOT be able to:
     - Create new buckets
     - Upload/delete files
     - Access other buckets

=======================================================================================
# Demo 5: Creating and Attaching IAM Roles to AWS Services

# Creating IAM Role for EC2 to Access S3

 Part 1: Create IAM Role
1. Access IAM Console
   - Login to AWS Console
   - Go to IAM service
   - Click "Roles" → "Create role"

2. Select Trusted Entity
   - Choose "AWS service"
   - Select "EC2" as use case
   - Click "Next"

 Part 2: Configure Permissions
1. Add S3 Access Policy
   - Search for "S3"
   - Select AmazonS3ReadOnlyAccess
   - Click "Next"

2. Alternative: Create Custom S3 Policy
   ```
   {
     "Version": "2012-10-17",
     "Statement": [
       {
         "Effect": "Allow",
         "Action": [
           "s3:ListBucket",
           "s3:GetObject"
         ],
         "Resource": [
           "arn:aws:s3:::*",
           "arn:aws:s3:::*/*"
         ]
       }
     ]
   }
   ```

 Part 3: Complete Role Setup
1. Role Details
   - Name: EC2-S3-ReadOnly-Role
   - Description: "Allows EC2 instances to read S3 buckets"
   - Click "Create role"

 Part 4: Attach Role to EC2
1. Modify EC2 Instance
   - Go to EC2 Console
   - Select your instance
   - Actions → Security → Modify IAM role
   - Choose EC2-S3-ReadOnly-Role
   - Click "Update IAM role"

 Part 5: Verify Access
1. EC2 Instance Connect

   - Through browser
   - Temporary SSH keys
   - URL pattern: https://region.console.aws.amazon.com/ec2-instance-connect

2. Test S3 Access
   ```
    Verify role
   aws sts get-caller-identity

    List all buckets
   aws s3 ls

    List specific bucket
   aws s3 ls s3://sandeep-bucket-123/
   ```

==============================================================================


 Demo 5: IAM User created and accessed with MFA 

 1. Sign in to AWS Console
- Access AWS Console → Go to IAM service

 2. Create IAM User
1. Click "Users" → "Create user"
2. Enter name: MFATestUser
3. Enable console access if needed
4. Set password

 3. Set Permissions
1. Choose permission method:
   - Direct policy attachment
   - Group assignment
2. Select required permissions
3. Click "Next" → "Create user"

 4. Enable MFA
1. Select created user "MFATestUser"
2. Go to "Security credentials"
3. Click "Assign MFA device"
4. Choose MFA type (Virtual/Hardware)
5. For Virtual MFA:
   - Scan QR with authenticator app
   - Enter two consecutive codes
   - Click "Add MFA"

 5. Share with User
- Login URL
- Username
- Initial password
- MFA setup instructions

==============================================================================

 Demo 6: IAM User with Multiple MFA Devices

```
Part 1: Create User with Initial MFA
1. IAM → Users → Create user
   - Username: MultiMFAUser
   - Console access: ✅
   - Password: Welcome@123
   - Custom password: ✅
   - Password reset: ❌

2. Add First MFA Device
   - Select user → Security credentials
   - Assign MFA device
   - Device name: Primary-MFA
   - Select Virtual MFA
   - Use Google Authenticator
   - Enter two consecutive codes
   - Finish setup

Part 2: Add Secondary MFA
1. Same user → Security credentials
2. Add another MFA
   - Device name: Backup-MFA
   - Choose different authenticator app (e.g., Authy)
   - Complete setup similarly

Part 3: Test MFA Failover
1. Sign out completely
2. Try logging in with:
   - Primary MFA
   - Secondary MFA
3. Verify both work
```

==============================================================================

 Demo 7: IAM Emergency Access Management

```
Part 1: Create Emergency Access User
1. IAM → Users → Create user
   - Username: EmergencyAdmin
   - Console access: ✅
   - Password: Complex password
   - Save credentials securely

2. Create Emergency Access Policy
   - IAM → Policies → Create policy
   - JSON:
   {
     "Version": "2012-10-17",
     "Statement": [
       {
         "Effect": "Allow",
         "Action": "*",
         "Resource": "*",
         "Condition": {
           "Bool": {
             "aws:MultiFactorAuthPresent": "true"
           }
         }
       }
     ]
   }
   - Name: EmergencyAccessPolicy

3. Attach Policy
   - Select EmergencyAdmin user
   - Attach EmergencyAccessPolicy
   - Enable MFA enforcement

Part 2: Setup Break-Glass Procedure
1. Create Documentation
   - Store credentials securely
   - Document access procedure
   - Include MFA backup codes

2. Test Emergency Access
   - Store credentials in secure location
   - Regular testing schedule
   - Document access attempts
```

==============================================================================

 Demo 8: IAM with Service Control Policies (SCP)

```
Part 1: Create Organization Structure
1. AWS Organizations
   - Enable Organizations
   - Create Organizational Unit (OU)
   - Name: DevelopmentOU

2. Create Service Control Policy
   - Organizations → Policies
   - Create policy
   - Name: DevelopmentSCP
   - Policy:
   {
     "Version": "2012-10-17",
     "Statement": [
       {
         "Effect": "Deny",
         "Action": [
           "s3:DeleteBucket",
           "ec2:TerminateInstances"
         ],
         "Resource": "*"
       }
     ]
   }

Part 2: Apply SCP
1. Select DevelopmentOU
2. Attach DevelopmentSCP
3. Move accounts to OU
4. Test restrictions
```

==============================================================================

 Demo 9: IAM with Resource Tags

```
Part 1: Create Tagged Resources
1. Create S3 Bucket
   - Name: tagged-bucket-demo
   - Tags:
     - Environment: Development
     - Project: Demo

2. Create Tag-Based Policy
   - IAM → Policies
   - Create policy:
   {
     "Version": "2012-10-17",
     "Statement": [
       {
         "Effect": "Allow",
         "Action": "s3:*",
         "Resource": "*",
         "Condition": {
           "StringEquals": {
             "aws:ResourceTag/Environment": "Development"
           }
         }
       }
     ]
   }
   - Name: TagBasedAccess

Part 2: Implement Tag-Based Access
1. Create Group: TagAccessGroup
2. Attach TagBasedAccess policy
3. Create test user
4. Add to TagAccessGroup
5. Test access to:
   - Tagged resources
   - Untagged resources
```

==============================================================================

 Demo 10: IAM Access Analyzer Setup

```
Part 1: Enable Access Analyzer
1. IAM → Access Analyzer
2. Create analyzer
   - Name: MainAccountAnalyzer
   - Zone of trust: Current account

Part 2: Configure Findings
1. Set up notifications
   - Create SNS topic
   - Configure email alerts

2. Review Findings
   - Check external access
   - Document findings
   - Create remediation plan

Part 3: Regular Maintenance
1. Schedule weekly reviews
2. Document changes
3. Update policies based on findings
```

Best Practices for All Demos:
1. Always follow least privilege principle
2. Document all changes
3. Regular access reviews
4. Maintain backup access methods
5. Test all configurations
6. Clean up resources after testing
